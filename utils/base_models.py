# This file defines all the base models for the fastapi

from pydantic import BaseModel, Field
from typing import Optional, List


class MultilingualQuestionRequest(BaseModel):
    question_en: Optional[str] = Field(None, description="Question in English.")
    answer_en: Optional[str] = Field(None, description="Answer in English.")

    question_hu: Optional[str] = Field(None, description="Question in Hungarian.")
    answer_hu: Optional[str] = Field(None, description="Answer in Hungarian.")

    question_de: Optional[str] = Field(None, description="Question in German.")
    answer_de: Optional[str] = Field(None, description="Answer in German.")

    references: Optional[List[str]] = Field(None, description="List of reference URLs.")

    def validate_languages(self):
        if not (
            (self.question_en and self.answer_en)
            or (self.question_hu and self.answer_hu)
            or (self.question_de and self.answer_de)
        ):
            raise ValueError(
                "At least one pair of question and answer must be provided in the same language."
            )


class RateChatRequest(BaseModel):
    log_id: str = Field(..., description="The ID of the chat log to be reviewed.")


class RetrieveReviewQuestionsRequest(BaseModel):
    hours: Optional[int] = Field(
        None, description="Number of past hours to retrieve review questions for."
    )


class ChatRequest(BaseModel):
    question: str
    id: str = None


class ChatResponse(BaseModel):
    id: str
    response: str
    reference_question_id: str = None
    log_id: str = None


# Pydantic model for the response schema with detailed parameter descriptions
class ChatLog(BaseModel):
    id: str = Field(
        ..., description="Unique identifier for the chat log, generated by MongoDB."
    )
    user_id: str = Field(
        ..., description="Unique identifier for the user who submitted the question."
    )
    question: str = Field(
        ..., description="The user's question submitted to the system."
    )
    answer: str = Field(
        ..., description="The system's response to the user's question."
    )
    chat_id: str = Field(
        ...,
        description="Unique identifier for the chat session to which this log belongs.",
    )
    reference_question_id: str = Field(
        ...,
        description="Unique identifier for the specific question within the chat session.",
    )
    timestamp: str = Field(
        ...,
        description="Timestamp indicating when the log entry was created in ISO 8601 format.",
    )
